<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\olant\runtime-de.tu_bs.cs.isf.e4cf.core.product\ 01 RAW\Other\source-SPARE-Time-Variants\PMBM.cpp"><function_decl><type><name>char</name></type> <name>alphabetNormalize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>alphabetDenormalize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ALPHABETSIZE</name> <init>= <expr><operator>(</operator><name>CHAR_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>String</name>;</typedef>
<class>class <name>PMSingle</name> <block>{<private type="default">
</private><public>public:
<function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>match</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> <name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list> = <literal type="number">0</literal>;</function_decl>
</public>}</block>;</class>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>MO</name></parameter>, <parameter><type><name>class</name></type> <name>SL</name></parameter>, <parameter><type><name>class</name></type> <name>MI</name></parameter>&gt;</parameter_list></template> class <name>PMBM</name> <super_list>: <super><specifier>public</specifier> <name>PMSingle</name></super></super_list> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>PMBM</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>kw</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>match</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> <name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>MO2</name></parameter>, <parameter><type><name>class</name></type> <name>SL2</name></parameter>, <parameter><type><name>class</name></type> <name>MI2</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type>
<name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>PMBM</name><argument_list type="generic">&lt;<argument><expr><name>MO2</name></expr></argument>,<argument><expr><name>SL2</name></expr></argument>,<argument><expr><name>MI2</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl></parameter> )</parameter_list>;</function_decl></friend></template>
</public><private>private:
<decl_stmt><decl><type><name>String</name></type> <name>keyword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MO</name></type> <name>mo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SL</name></type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MI</name></type> <name>shifter</name></decl>;</decl_stmt>
</private>}</block>;</class>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>MO</name></parameter>, <parameter><type><name>class</name></type> <name>SL</name></parameter>, <parameter><type><name>class</name></type> <name>MI</name></parameter>&gt;</parameter_list></template> <name><name><name>PMBM</name><argument_list type="generic">&lt;<argument><expr><name>MO</name></expr></argument>,<argument><expr><name>SL</name></expr></argument>,<argument><expr><name>MI</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>PMBM</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier>
<name>String</name><modifier>&amp;</modifier></type> <name>kw</name></decl></parameter> )</parameter_list> <member_init_list>: <call><name>keyword</name><argument_list>( <argument><expr><name>kw</name></expr></argument> )</argument_list></call>, <call><name>mo</name><argument_list>( <argument><expr><name>keyword</name></expr></argument> )</argument_list></call>, <call><name>sl</name><argument_list>( <argument><expr><name>keyword</name></expr></argument> )</argument_list></call>, <call><name>shifter</name><argument_list>(
<argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>mo</name></expr></argument> )</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>MO</name></parameter>, <parameter><type><name>class</name></type> <name>SL</name></parameter>, <parameter><type><name>class</name></type> <name>MI</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name><name><name>PMBM</name><argument_list type="generic">&lt;<argument><expr><name>MO</name></expr></argument>,<argument><expr><name>SL</name></expr></argument>,<argument><expr><name>MI</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>match</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier>
<name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> <name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>pLen</name> <init>= <expr><call><name><name>keyword</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>Slast</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>pLen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>vBegin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>vBegin</name> <operator>&lt;=</operator> <name>Slast</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>vBegin</name> <operator>=</operator> <call><name><name>sl</name><operator>.</operator><name>skip</name></name><argument_list>( <argument><expr><name>S</name></expr></argument>, <argument><expr><name>vBegin</name></expr></argument>, <argument><expr><name>Slast</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>vBegin</name> <operator>&lt;=</operator> <name>Slast</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pLen</name> <operator>&amp;&amp;</operator> <name><name>S</name><index>[<expr><name>vBegin</name> <operator>+</operator> <call><name><name>mo</name><operator>.</operator><name>traverse</name></name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>]</index></name> <operator>==</operator>
<name><name>keyword</name><index>[<expr><call><name><name>mo</name><operator>.</operator><name>traverse</name></name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name>pLen</name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>callBack</name><argument_list>( <argument><expr><name>vBegin</name> <operator>+</operator> <name>pLen</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vBegin</name> <operator>+=</operator> <call><name><name>shifter</name><operator>.</operator><name>shift</name></name><argument_list>( <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <name>pLen</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><name><name>S</name><index>[<expr><name>vBegin</name> <operator>+</operator> <call><name><name>mo</name><operator>.</operator><name>traverse</name></name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>]</index></name></expr></else></ternary></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>MO</name></parameter>, <parameter><type><name>class</name></type> <name>SL</name></parameter>, <parameter><type><name>class</name></type> <name>MI</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name><name><name>PMBM</name><argument_list type="generic">&lt;<argument><expr><name>MO</name></expr></argument>,<argument><expr><name>SL</name></expr></argument>,<argument><expr><name>MI</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>c_inv</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
<return>return<expr><operator>(</operator> <call><name><name>mo</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>sl</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>shifter</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>MO</name></parameter>, <parameter><type><name>class</name></type> <name>SL</name></parameter>, <parameter><type><name>class</name></type> <name>MI</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(
<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>PMBM</name><argument_list type="generic">&lt;<argument><expr><name>MO</name></expr></argument>,<argument><expr><name>SL</name></expr></argument>,<argument><expr><name>MI</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name><name>r</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"PMBM = (\n"</literal> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>keyword</name></name> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>mo</name></name> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>sl</name></name> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>shifter</name></name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>os</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
