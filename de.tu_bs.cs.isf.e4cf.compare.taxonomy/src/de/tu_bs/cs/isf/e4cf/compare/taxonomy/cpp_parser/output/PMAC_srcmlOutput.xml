<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\olant\runtime-de.tu_bs.cs.isf.e4cf.core.product\ 01 RAW\Other\source-SPARE-Time-Variants\PMAC.cpp"><function_decl><type><name>char</name></type> <name>alphabetNormalize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>alphabetDenormalize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ALPHABETSIZE</name> <init>= <expr><operator>(</operator><name>CHAR_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>String</name>;</typedef>
<class>class <name>PMMultiple</name> <block>{<private type="default">
</private><public>public:
<function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>match</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> <name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list> = <literal type="number">0</literal>;</function_decl>
</public>}</block>;</class>
<typedef>typedef <type><name>int</name></type> <name>State</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>State</name></type> <name>FIRSTSTATE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>State</name></type> <name>INVALIDSTATE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>PMAC</name> <super_list>: <super><specifier>public</specifier> <name>PMMultiple</name></super></super_list> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>PMAC</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter> )</parameter_list>;</constructor_decl>
<constructor_decl><name>PMAC</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>PMAC</name><modifier>&amp;</modifier></type> <name>M</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>match</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> <name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type>
<name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>PMAC</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list>;</function_decl></friend></template>
</public><private>private:
<decl_stmt><decl><type><name>T</name></type> <name>machine</name></decl>;</decl_stmt>
</private>}</block>;</class>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <name><name><name>PMAC</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>PMAC</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter> )</parameter_list> <member_init_list>: <call><name>machine</name><argument_list>( <argument><expr><name>P</name></expr></argument>
)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <name><name><name>PMAC</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>PMAC</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>PMAC</name><modifier>&amp;</modifier></type> <name>M</name></decl></parameter> )</parameter_list> <member_init_list>: <call><name>machine</name><argument_list>( <argument><expr><name><name>M</name><operator>.</operator><name>machine</name></name></expr></argument> )</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name><name><name>PMAC</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>match</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> <name>callBack</name>
<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>State</name></type> <name>q</name> <init>= <expr><name>FIRSTSTATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name><name>machine</name><operator>.</operator><name>output</name></name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>callBack</name><argument_list>( <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name><name>machine</name><operator>.</operator><name>output</name></name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>Slen</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>j</name> <operator>&lt;</operator> <name>Slen</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name><name>machine</name><operator>.</operator><name>transition</name></name><argument_list>( <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>q</name> <operator>!=</operator> <name>INVALIDSTATE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name><name>machine</name><operator>.</operator><name>output</name></name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>callBack</name><argument_list>( <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name><name>machine</name><operator>.</operator><name>output</name></name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name><name><name>PMAC</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>c_inv</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<return>return<expr><operator>(</operator> <call><name><name>machine</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>PMAC</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name><name>r</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"PMAC&lt;T&gt; = (\n"</literal> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>machine</name></name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>os</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function></unit>
