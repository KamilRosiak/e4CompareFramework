<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\olant\runtime-de.tu_bs.cs.isf.e4cf.core.product\ 01 RAW\Other\source-SPARE-Time-Variants\PMCW.cpp"><function_decl><type><name>char</name></type> <name>alphabetNormalize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>alphabetDenormalize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ALPHABETSIZE</name> <init>= <expr><operator>(</operator><name>CHAR_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>String</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>State</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>State</name></type> <name>FIRSTSTATE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>State</name></type> <name>INVALIDSTATE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>StateTo</name> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>StateTo</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter> )</parameter_list>;</constructor_decl>
<constructor_decl><name>StateTo</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><name>T</name><modifier>&amp;</modifier></type> <name>map</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>index</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl type="operator"><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>operator<name>[]</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>index</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>void</name></type> <name>setSize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type>
<name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter> )</parameter_list>;</function_decl></friend></template>
</public><private>private:
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>rep</name></decl>;</decl_stmt>
</private>}</block>;</class>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>StateTo</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>rep</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>StateTo</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <member_init_list>:
<call><name>rep</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>rep</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>T</name><modifier>&amp;</modifier></type> <name><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>map</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name><name>rep</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>[]</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name></type>
<name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name><name>rep</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>void</name></type> <name><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>setSize</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>int</name></type> <name><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>size</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name><name>rep</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>bool</name></type> <name><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>c_inv</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<return>return<expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"StateTo = (\n"</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>rep</name></name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>os</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function_decl type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter> )</parameter_list>;</function_decl>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"Vector = (\n"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr><operator>,</operator> <expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>pos</name> <operator>&lt;&lt;</operator> <literal type="string">"-&gt;"</literal> <operator>&lt;&lt;</operator> <operator>*</operator><name>iter</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<return>return <expr><name>os</name></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"Set = (\n"</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr><operator>,</operator> <expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>pos</name> <operator>&lt;&lt;</operator> <literal type="string">"-&gt;"</literal> <operator>&lt;&lt;</operator> <operator>*</operator><name>iter</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<return>return <expr><name>os</name></expr>;</return>
</block_content>}</block></function>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>SymbolTo</name> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>SymbolTo</name><parameter_list>()</parameter_list>;</constructor_decl>
<constructor_decl><name>SymbolTo</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><name>T</name><modifier>&amp;</modifier></type> <name>map</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl type="operator"><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>operator<name>[]</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type>
<name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter> )</parameter_list>;</function_decl></friend></template>
</public><private>private:
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>rep</name></decl>;</decl_stmt>
</private>}</block>;</class>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SymbolTo</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>rep</name><argument_list>(<argument><expr><name>ALPHABETSIZE</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SymbolTo</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <member_init_list>:
<call><name>rep</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>rep</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>T</name><modifier>&amp;</modifier></type> <name><name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>map</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name><name>rep</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name><name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>[]</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type>
<name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name><name>rep</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>bool</name></type> <name><name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>c_inv</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<return>return<expr><operator>(</operator><call><name><name>rep</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ALPHABETSIZE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"SymbolTo = (\n"</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>rep</name></name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>os</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>Trie</name> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>Trie</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter> )</parameter_list>;</constructor_decl>
<constructor_decl><name>Trie</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><name>State</name></type> <name>image</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>State</name></type> <name>BFTfirst</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>State</name></type> <name>BFTsuccessor</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>int</name></type> <name>BFTdepth</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type>
<name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter> )</parameter_list>;</function_decl></friend></template>
</public><private>private:
<decl_stmt><decl><type><name><name>StateTo</name><argument_list type="generic">&lt; <argument><expr><name><name>SymbolTo</name><argument_list type="generic">&lt; <argument><expr><name>State</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>depth</name></decl>;</decl_stmt>
</private>}</block>;</class>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Trie</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter>)</parameter_list> <member_init_list>:
<call><name>rep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>depth</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>P</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ALPHABETSIZE</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>FIRSTSTATE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>INVALIDSTATE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>depth</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>FIRSTSTATE</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>i</name> <init>= <expr><call><name><name>P</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>P</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>State</name></type> <name>q</name> <init>= <expr><name>FIRSTSTATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>trav</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name><name>String</name><operator>::</operator><name>const_iterator</name></name></type> <name>j</name> <init>= <expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>!=</operator> <call><name><name>i</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>image</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>distance</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>INVALIDSTATE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>State</name></type> <name>latest</name> <init>= <expr><call><name><name>rep</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>latest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>depth</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>latest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ALPHABETSIZE</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>latest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>INVALIDSTATE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>depth</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>latest</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>depth</name><index>[<expr><name>q</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>distance</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <name>latest</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>image</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>distance</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>INVALIDSTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>image</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>distance</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Trie</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>rep</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>rep</name></name></expr></argument>)</argument_list></call>,
<call><name>depth</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>depth</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>State</name></type> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>image</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type>
<name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>FIRSTSTATE</name> <operator>&lt;=</operator> <name>q</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;</operator> <name>ALPHABETSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name><name>rep</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>State</name></type> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>BFTfirst</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>depth</name><index>[<expr><name>FIRSTSTATE</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>FIRSTSTATE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>State</name></type> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>BFTsuccessor</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return<expr><operator>(</operator><name>INVALIDSTATE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>State</name></type> <name>r</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>depth</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>depth</name><index>[<expr><name>q</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return<expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>FIRSTSTATE</name></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>depth</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>depth</name><index>[<expr><name>q</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return<expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"I shouldn't be here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>INVALIDSTATE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>int</name></type> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>BFTdepth</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name><name>depth</name><index>[<expr><name>q</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>int</name></type> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>size</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name><name>rep</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>bool</name></type> <name><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>c_inv</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<return>return<expr><operator>(</operator><call><name><name>rep</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>depth</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>depth</name><index>[<expr><name>FIRSTSTATE</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name><name>rep</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>depth</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"Trie&lt;T&gt; = (\n"</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>rep</name></name> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>depth</name></name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>os</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>Factoracle</name> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>Factoracle</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter> )</parameter_list>;</constructor_decl>
<constructor_decl><name>Factoracle</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><name>State</name></type> <name>image</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>a</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type>
<name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter> )</parameter_list>;</function_decl></friend></template>
</public><private>private:
<decl_stmt><decl><type><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name><name>SymbolTo</name><argument_list type="generic">&lt;<argument><expr><name>State</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>rep</name></decl>;</decl_stmt>
</private>}</block>;</class>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Factoracle</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier>
<name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>rep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>P</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ALPHABETSIZE</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>FIRSTSTATE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>INVALIDSTATE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>i</name> <init>= <expr><call><name><name>P</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>State</name></type> <name>q</name> <init>= <expr><name>FIRSTSTATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>trav</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name><name>String</name><operator>::</operator><name>const_iterator</name></name></type> <name>j</name> <init>= <expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>!=</operator> <call><name><name>i</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>State</name></type> <name>latest</name> <init>= <expr><call><name><name>rep</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>latest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>ALPHABETSIZE</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>latest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>INVALIDSTATE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>distance</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <name>latest</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>image</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>distance</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>INVALIDSTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>image</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>distance</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>!=</operator> <call><name><name>i</name><operator>-&gt;</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ilen</name> <init>= <expr><call><name><name>i</name><operator>-&gt;</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>State</name></type> <name>q</name> <init>= <expr><name>FIRSTSTATE</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>j</name> <operator>!=</operator> <call><name><name>i</name><operator>-&gt;</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>image</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>INVALIDSTATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>image</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <call><name><name>i</name><operator>-&gt;</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rep</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><call><name>alphabetNormalize</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><index>[<expr><call><name><name>trav</name><operator>.</operator><name>traverse</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <name><name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Factoracle</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type>
<name>r</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>rep</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>rep</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>State</name></type> <name><name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>image</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name>char</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>FIRSTSTATE</name> <operator>&lt;=</operator> <name>q</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;</operator> <name>ALPHABETSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name><name>rep</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>int</name></type> <name><name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>size</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name><name>rep</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><specifier>inline</specifier> <name>bool</name></type> <name><name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>c_inv</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<return>return<expr><operator>(</operator><call><name><name>rep</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>fo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>fo</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"Factoracle&lt;T&gt; = (\n"</literal> <operator>&lt;&lt;</operator> <name><name>fo</name><operator>.</operator><name>rep</name></name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>fo</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>os</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>int</name></type> <name>min</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>max</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>PLUSINFINITY</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MINUSINFINITY</name> <init>= <expr><name>INT_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>TRUE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>FALSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<class>class <name>STravFWD</name> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>STravFWD</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><name>int</name></type> <name>traverse</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>int</name></type> <name>traverseInverse</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STravFWD</name><modifier>&amp;</modifier></type>
<name>t</name></decl></parameter> )</parameter_list>;</function_decl></friend>
</public>}</block>;</class>
<class>class <name>STravREV</name> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>STravREV</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><name>int</name></type> <name>traverse</name><parameter_list>( <parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>index</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>int</name></type> <name>traverseInverse</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STravREV</name><modifier>&amp;</modifier></type>
<name>t</name></decl></parameter> )</parameter_list>;</function_decl></friend>
</public><private>private:
<constructor><name>STravREV</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>len</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
</private>}</block>;</class>
<typedef>typedef <type><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>STravFWD</name></expr></argument>&gt;</argument_list></name></type> <name>FTrie</name>;</typedef>
<typedef>typedef <type><name><name>Trie</name><argument_list type="generic">&lt;<argument><expr><name>STravREV</name></expr></argument>&gt;</argument_list></name></type> <name>RTrie</name>;</typedef>
<typedef>typedef <type><name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>STravFWD</name></expr></argument>&gt;</argument_list></name></type> <name>FFactoracle</name>;</typedef>
<typedef>typedef <type><name><name>Factoracle</name><argument_list type="generic">&lt;<argument><expr><name>STravREV</name></expr></argument>&gt;</argument_list></name></type> <name>RFactoracle</name>;</typedef>
<class>class <name>CWOutput</name> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>CWOutput</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTrie</name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter> )</parameter_list>;</constructor_decl>
<constructor_decl><name>CWOutput</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>CWOutput</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list>;</constructor_decl>
<destructor_decl><name>~CWOutput</name><parameter_list>()</parameter_list>;</destructor_decl>
<function_decl><type><name>int</name></type> <name>isKeyword</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl type="operator"><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>operator<name>[]</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>State</name></type> <name>q</name></decl></parameter> )</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWOutput</name><modifier>&amp;</modifier></type>
<name>r</name></decl></parameter> )</parameter_list>;</function_decl></friend>
</public><private>private:
<decl_stmt><decl><type><name><name>StateTo</name><argument_list type="generic">&lt;<argument><expr><name>String</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>rep</name></decl>;</decl_stmt>
</private>}</block>;</class>
<class>class <name>PMMultiple</name> <block>{<private type="default">
</private><public>public:
<function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>match</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> <name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list> = <literal type="number">0</literal>;</function_decl>
</public>}</block>;</class>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> class <name>PMCW</name> <super_list>: <super><specifier>public</specifier> <name>PMMultiple</name></super></super_list> <block>{<private type="default">
</private><public>public:
<constructor_decl><name>PMCW</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter> )</parameter_list>;</constructor_decl>
<constructor_decl><name>PMCW</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list>;</constructor_decl>
<function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>match</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> <name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_inv</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>U2</name></parameter>&gt;</parameter_list> <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(
<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T2</name></expr></argument>,<argument><expr><name>U2</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl></parameter> )</parameter_list>;</function_decl></friend></template>
</public><private>private:
<decl_stmt><decl><type><name>U</name></type> <name>raut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CWOutput</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>shift</name></decl>;</decl_stmt>
</private>}</block>;</class>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <name><name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>PMCW</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>P</name></decl></parameter> )</parameter_list> <member_init_list>:
<call><name>raut</name><argument_list>( <argument><expr><name>P</name></expr></argument> )</argument_list></call>, <call><name>out</name><argument_list>( <argument><expr><name>P</name></expr></argument>, <argument><expr><name>raut</name></expr></argument> )</argument_list></call>, <call><name>shift</name><argument_list>( <argument><expr><name>P</name></expr></argument>, <argument><expr><name>raut</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<constructor><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <name><name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>PMCW</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter> )</parameter_list> <member_init_list>: <call><name>raut</name><argument_list>(
<argument><expr><name><name>r</name><operator>.</operator><name>raut</name></name></expr></argument> )</argument_list></call>, <call><name>out</name><argument_list>( <argument><expr><name><name>r</name><operator>.</operator><name>out</name></name></expr></argument> )</argument_list></call>, <call><name>shift</name><argument_list>( <argument><expr><name><name>r</name><operator>.</operator><name>shift</name></name></expr></argument> )</argument_list></call> </member_init_list><block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name><name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>match</name></name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type>
<name>callBack</name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>c_inv</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>State</name></type> <name>v</name> <init>= <expr><name>FIRSTSTATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>vlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>char</name></type> <name>vrtake1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name></type> <name>O</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name><name>out</name><operator>.</operator><name>isKeyword</name></name><argument_list>( <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><name><name>out</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>callBack</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>O</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name><name>shift</name><operator>.</operator><name>shift</name></name><argument_list>( <argument><expr><name>raut</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><operator>(</operator><ternary><condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>,
<argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vrtake1</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><name><name>S</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>int</name></type> <name>Slen</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>r</name> <operator>&lt;=</operator> <name>Slen</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>FIRSTSTATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vrtake1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name><name>out</name><operator>.</operator><name>isKeyword</name></name><argument_list>( <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><name><name>out</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>( <expr><name>l</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>raut</name><operator>.</operator><name>image</name></name><argument_list>( <argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>!=</operator>
<name>INVALIDSTATE</name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>FIRSTSTATE</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>vrtake1</name> <operator>=</operator> <name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>raut</name><operator>.</operator><name>image</name></name><argument_list>( <argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name><name>out</name><operator>.</operator><name>isKeyword</name></name><argument_list>( <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><name><name>out</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name><name>O</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>callBack</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><name>O</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name><name>shift</name><operator>.</operator><name>shift</name></name><argument_list>( <argument><expr><name>raut</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><operator>(</operator><ternary><condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><name>vrtake1</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><name><name>S</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name><name>shift</name><operator>.</operator><name>shift</name></name><argument_list>( <argument><expr><name>raut</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><operator>(</operator><ternary><condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>S</name><index>[<expr><name>l</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>,
<argument><expr><name>vlen</name></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><name>vrtake1</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>alphabetNormalize</name><argument_list>( <argument><expr><name><name>S</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name><name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>c_inv</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
<return>return<expr><operator>(</operator> <call><name><name>raut</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>out</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>shift</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>PMCW</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name><name>r</name><operator>.</operator><name>c_inv</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"PMCW&lt;T,U&gt; = (\n"</literal> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>raut</name></name> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>out</name></name> <operator>&lt;&lt;</operator> <name><name>r</name><operator>.</operator><name>shift</name></name> <operator>&lt;&lt;</operator> <literal type="string">")\n"</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>os</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
